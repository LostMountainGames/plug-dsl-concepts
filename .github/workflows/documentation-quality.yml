name: Documentation Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate-attribution:
    name: Validate Attribution and Legal Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Lost Mountain Games Attribution
        run: |
          echo "Validating Lost Mountain Games attribution in documentation..."

          # Check README has proper attribution
          if ! grep -q "Lost Mountain Games" README.md; then
            echo "ERROR: README.md missing Lost Mountain Games attribution"
            exit 1
          fi

          # Check for innovation attributions
          if ! grep -r "Lost Mountain Games" syntax/ architecture/ tooling/ performance/ examples/; then
            echo "ERROR: Documentation sections missing Lost Mountain Games attribution"
            exit 1
          fi

          echo "✓ Attribution validation passed"

      - name: Verify MIT License
        run: |
          echo "Verifying MIT license compliance..."

          if [ ! -f LICENSE ]; then
            echo "ERROR: LICENSE file not found"
            exit 1
          fi

          if ! grep -q "MIT License" LICENSE; then
            echo "ERROR: LICENSE file does not contain MIT License"
            exit 1
          fi

          if ! grep -q "Lost Mountain Games" LICENSE; then
            echo "ERROR: LICENSE missing Lost Mountain Games copyright"
            exit 1
          fi

          echo "✓ MIT license validation passed"

      - name: Check for Proprietary Content
        run: |
          echo "Scanning for proprietary content..."

          # Check for prohibited terms that might indicate proprietary implementation
          PROHIBITED_TERMS="proprietary implementation|internal secret|confidential|private key|api key"

          if grep -ri "$PROHIBITED_TERMS" syntax/ architecture/ tooling/ performance/ examples/; then
            echo "WARNING: Found potentially proprietary content - please review"
            # Don't fail, just warn - manual review required
          fi

          echo "✓ Proprietary content scan complete"

      - name: Validate Markdown Syntax
        run: |
          echo "Installing markdownlint..."
          npm install -g markdownlint-cli

          echo "Validating markdown syntax..."
          markdownlint '**/*.md' --ignore node_modules || true

          echo "✓ Markdown validation complete"

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Required Directories
        run: |
          echo "Validating repository structure..."

          REQUIRED_DIRS="syntax architecture performance tooling examples"

          for dir in $REQUIRED_DIRS; do
            if [ ! -d "$dir" ]; then
              echo "ERROR: Required directory '$dir' not found"
              exit 1
            fi
          done

          echo "✓ Directory structure validation passed"

      - name: Check Required Files
        run: |
          echo "Checking required files..."

          REQUIRED_FILES="README.md LICENSE"

          for file in $REQUIRED_FILES; do
            if [ ! -f "$file" ]; then
              echo "ERROR: Required file '$file' not found"
              exit 1
            fi
          done

          echo "✓ Required files validation passed"

  validate-concepts:
    name: Validate Concept Documentation Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Documentation Completeness
        run: |
          echo "Validating documentation completeness..."

          # Check that each section has content
          for dir in syntax architecture performance tooling examples; do
            if [ -d "$dir" ]; then
              FILE_COUNT=$(find "$dir" -name "*.md" | wc -l)
              if [ $FILE_COUNT -eq 0 ]; then
                echo "WARNING: Directory '$dir' contains no markdown files"
              fi
            fi
          done

          echo "✓ Documentation completeness check complete"

      - name: Validate Code Examples
        run: |
          echo "Validating code examples in documentation..."

          # Check for code blocks in documentation
          if ! grep -r '```' syntax/ architecture/ tooling/ performance/ examples/; then
            echo "WARNING: No code examples found in documentation"
          fi

          echo "✓ Code example validation complete"

  generate-summary:
    name: Generate Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-attribution, validate-structure, validate-concepts]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Summary
        run: |
          echo "## Documentation Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✓ Attribution validation passed" >> $GITHUB_STEP_SUMMARY
          echo "✓ MIT license compliance verified" >> $GITHUB_STEP_SUMMARY
          echo "✓ Repository structure validated" >> $GITHUB_STEP_SUMMARY
          echo "✓ Concept documentation quality checked" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**All validation checks completed successfully**" >> $GITHUB_STEP_SUMMARY
